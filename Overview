The program accesses the user's webcam to capture live video, processes each frame to detect the dominant emotion using DeepFace, 
and overlays the detected emotion on the video feed displayed in a window. The program runs until the user presses 'q' to exit.

Code Structure and Functionality

Imports:
cv2: OpenCV library for webcam access, image processing, and display.
DeepFace: A deep learning library for facial analysis, used here for emotion detection.
Webcam Initialization:
cap = cv2.VideoCapture(0)
Initializes the default webcam (index 0).
cap is the video capture object used to read frames.

Main Loop:
while True:
    ret, frame = cap.read()
    if not ret:
        break
Enters an infinite loop to continuously capture frames.
cap.read() returns:
ret: A boolean indicating if the frame was captured successfully.
frame: The captured video frame (a NumPy array representing the image).
If ret is False (e.g., webcam disconnected), the loop exits.

Emotion Analysis:
try:
    result = DeepFace.analyze(frame, actions=['emotion'], enforce_detection=False)
    dominant_emotion = result[0]['dominant_emotion']
DeepFace.analyze() processes the frame to detect emotions.
actions=['emotion']: Specifies that only emotion detection is performed.
enforce_detection=False: Allows analysis even if no face is detected, preventing errors.
result is a list of dictionaries, where result[0]['dominant_emotion'] contains the most likely emotion (e.g., 'happy', 'sad', 'angry').
Wrapped in a try-except block to handle potential errors (e.g., no face detected, processing issues).

Display Emotion on Frame:
cv2.putText(frame, f'Emotion: {dominant_emotion}', (30, 50),
            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
Overlays the detected emotion on the frame at position (30, 50).
Uses cv2.FONT_HERSHEY_SIMPLEX font, scale 1, green color (0, 255, 0), and thickness 2.

Show Frame:
cv2.imshow('Emotion Detection', frame)
Displays the frame with the emotion label in a window titled "Emotion Detection".

Exit Condition:
if cv2.waitKey(1) & 0xFF == ord('q'):
    break
cv2.waitKey(1) waits 1ms for a key press and returns its ASCII value.
& 0xFF ensures compatibility across platforms by masking the key value.
If the key pressed is 'q', the loop breaks, ending the program.

Cleanup:
cap.release()
cv2.destroyAllWindows()
cap.release(): Releases the webcam resource.
cv2.destroyAllWindows(): Closes the display window.


Key Features :

Real-Time Processing: Continuously captures and analyzes webcam frames.
Emotion Detection: Uses DeepFace's pre-trained models to identify emotions like happy, sad, angry, etc.
Error Handling: Gracefully handles errors during emotion analysis.
Visual Feedback: Displays the live video feed with the detected emotion overlaid.


Dependencies :

OpenCV: Install via pip install opencv-python.
DeepFace: Install via pip install deepface. Requires deep learning dependencies (e.g., TensorFlow, Keras).
A working webcam connected to the system.
